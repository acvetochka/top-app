"use client";

// import type { Metadata } from "next";
import { useEffect, useState, KeyboardEvent, useRef } from "react";
import { Noto_Sans } from "next/font/google";
import cn from "classnames";
import { GoogleAnalytics } from '@next/third-parties/google'

import { Footer, Header, Sidebar } from "@/sections";
import "./globals.css";
import styles from "./Layout.module.css";
// import { API } from "./api";

const notoSans = Noto_Sans({ subsets: ["latin"], weight: ["300", "400", "500", "700"], display: "swap" });

// export const metadata: Metadata = {
//   title: "Top App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [isSkipLinkDisplayed, setIsSkipLinkDisplayed] = useState<boolean>(false);
  const bodyRef = useRef<HTMLBodyElement>(null);

  useEffect(() => {
    setIsSkipLinkDisplayed(isSkipLinkDisplayed);
  }, [isSkipLinkDisplayed]);

  const skipContentAction = (key: KeyboardEvent) => {
    if (key.code === "Space" || key.code === "Enter") {
      key.preventDefault();
      bodyRef.current?.focus();
    }
    setIsSkipLinkDisplayed(false);
  };
  return (
    <html lang="en">
      <body className={notoSans.className} ref={bodyRef} tabIndex={0}>
        <a
          onFocus={() => setIsSkipLinkDisplayed(true)}
          tabIndex={1}
          className={cn(styles.skipLink, {
            [styles.displayed]: isSkipLinkDisplayed,
          })}
          onKeyDown={skipContentAction}
        >
          Сразу к содержанию
        </a>
        <Header />
        <Sidebar className="aside" />
        <main role="main">
        {children}
        </main>
        <Footer />
      </body>
      <GoogleAnalytics gaId="G-W7F2LH3F6S" />
    </html>
  );
}

// export const withLayout = <T extends Record<string, unknown> & IAppContext>(Component: FunctionComponent<T>) => {
//   return function withLayoutComponent(props: T): JSX.Element {
//     return (
//       <AppContextProvider menu={props.menu} firstCategory={props.firstCategory}>
//         <Layout>
//           <Component {...props} />
//         </Layout>
//       </AppContextProvider>
//     );
//   };
// };
